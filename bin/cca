#!/bin/bash

# global parameters
COOKIE_JAR=~/.cli-client-atcoder-cookie
URIBASE=https://atcoder.jp
VERSION='0.2-dev'
invoke_curl() {
		curl -sS \
		-A "cli-client-atcoder/$VERSION" \
		-b "$COOKIE_JAR" \
		-c "$COOKIE_JAR" "$@"
}

# custom parameters
declare -f atcoder_build
declare -f atcoder_run
declare SOURCETMPL
declare SOURCEFILE
declare LANGUAGEID
declare -f atcoder_assert_tmplroot
declare TMPLROOT
declare -f atcoder_edit
declare -f atcoder_repl

atcoder_assert_config() {
	type -t atcoder_build >/dev/null || exitm "config missing: atcoder_build"
	type -t atcoder_run >/dev/null || exitm "config missing: atcoder_run"
	[ -v SOURCETMPL ] || exitm "config missing: SOURCETMPL"
	[ -v SOURCEFILE ] || exitm "config missing: SOURCEFILE"
	[ -v LANGUAGEID ] || exitm "config missing: LANGUAGEID"
	[ -v LANGTITLE ] || exitm "config missing: LANGTITLE"
}

show_config() {
	m "Source: $SOURCEFILE"
	m "Language: $LANGTITLE ($LANGUAGEID)"
	atcoder_check_logged_in
}

atcoder_assert_edit() {
	type -t atcoder_edit >/dev/null || exitm "config missing: atcoder_edit"
	atcoder_assert_config
}

atcoder_load_config() {
	[ ! -x ~/.cli-client-atcoder ] || . ~/.cli-client-atcoder
	[ ! -x ./.atcoder ] || . ./.atcoder
}

# common functions
exitm() {
	echo 1>&2 "ABORT: $@"
	exit 1
}
m() {
	echo 1>&2 "INFO: $@"
}

# http wrapper
atcoder_http_get() {
	local URIPATH="$1"
	shift
	invoke_curl "${URIBASE}${URIPATH}" "$@"
}
atcoder_http_post() {
	local URIPATH="$1"
	shift
	invoke_curl -XPOST "${URIBASE}${URIPATH}" "$@"
}

atcoder_extract_js_var() {
	local VARNAME VALUE
	VARNAME="$1"
	[ -n "$VARNAME" ] || exitm "INTERNAL ERROR: VARNAME MISSING"
	sed -ne "/var $VARNAME = \"/ { s/.*var $VARNAME = \"//; s/\".*//; p; Q }" <<< "$CONTENT"
}

atcoder_check_logged_in() {
	local CONTENT USER_SCREEN_NAME
	CONTENT="$(atcoder_http_get /home)" || exitm "failed to get /home"
	USER_SCREEN_NAME="$(atcoder_extract_js_var userScreenName <<< "$CONTENT")"
	if [ -z "$USER_SCREEN_NAME" ]
	then m "not logged in."
		return 1
	else m "logged in as: $USER_SCREEN_NAME"
		return 0
	fi
}

atcoder_do_login() {
	local CONTENT CSRF_TOKEN USER_SCREEN_NAME
	CONTENT="$(atcoder_http_get /login)" || exitm "failed to get /login"
	CSRF_TOKEN="$(atcoder_extract_js_var csrfToken <<< "$CONTENT")"
	[ -n "$CSRF_TOKEN" ] || exitm "failed to detect csrf_token"
	# m "csrf_token: $CSRF_TOKEN"
	USER_SCREEN_NAME="$(atcoder_extract_js_var userScreenName <<< "$CONTENT")"
	if [ -z "$USER_SCREEN_NAME" ]
	then m "not logged in."
	else m "logged in as: $USER_SCREEN_NAME"
		return 0
	fi

	echo 1>&2 -n "user: "
	read USER_SCREEN_NAME || exitm "Cancelled."

	local PASSWORD
	echo 1>&2 -n "pass: "
	read -s PASSWORD || exitm "Cancelled."

	m "login..."
	local STATUS
	STATUS="$(atcoder_http_post /login \
		-F "username=$USER_SCREEN_NAME" \
		-F "password=$PASSWORD" \
		-F "csrf_token=$CSRF_TOKEN" \
		-o /dev/null -w '%{http_code}\n'
		)" ||
		exitm "failed to post /login"
	case "$STATUS" in
	302) ;;
	*)   exitm "SOMETHING WRONG: non-302 response($STATUS) after post" ;;
	esac


	atcoder_check_logged_in
	case "$?" in
	0)
		m "login ok."
		return 0
		;;
	*)
		m "login failed."
		return 1
		;;
	esac
}

atcoder_do_logout() {
	local CONTENT CSRF_TOKEN USER_SCREEN_NAME
	CONTENT="$(atcoder_http_get /login)" || exitm "failed to get /login"
	CSRF_TOKEN="$(atcoder_extract_js_var csrfToken <<< "$CONTENT")"
	[ -n "$CSRF_TOKEN" ] || exitm "failed to detect csrf_token"
	# m "csrf_token: $CSRF_TOKEN"
	USER_SCREEN_NAME="$(atcoder_extract_js_var userScreenName <<< "$CONTENT")"
	if [ -z "$USER_SCREEN_NAME" ]
	then m "not logged in."
		return 0
	else m "logged in as: $USER_SCREEN_NAME"
	fi

	m "logout..."
	local STATUS
	STATUS="$(atcoder_http_post /logout \
		-F "csrf_token=$CSRF_TOKEN" \
		-o /dev/null -w '%{http_code}\n'
		)" ||
		exitm "failed to post /logout"
	case "$STATUS" in
	302) ;;
	*)   exitm "SOMETHING WRONG: non-302 response($STATUS) after post" ;;
	esac

	atcoder_check_logged_in
	case "$?" in
	1)
		m "logout ok."
		return 0
		;;
	*)
		m "logout failed."
		return 1
		;;
	esac
}

atcoder_detect_by_dir() {
	case "$1" in
	CONTEST) sed -ne '\@/[^/]\+/[^/]\+$@ { s@.*/\([^/]\+\)/\([^/]\+$\)@\1@; p }' ;;
	PROBLEM) sed -ne '\@/[^/]\+/[^/]\+$@ { s@.*/\([^/]\+\)/\([^/]\+$\)@\2@; p }' ;;
	*) exitm "INTERNAL ERROR: unknown: $1" ;;
	esac
}

atcoder_detect_by_pwd() {
	pwd | atcoder_detect_by_dir "$@"
}

declare CONTEST
declare PROBLEM
atcoder_assert_pwd() {
	CONTEST="$(atcoder_detect_by_pwd CONTEST)"
	PROBLEM="$(atcoder_detect_by_pwd PROBLEM)"
	[ -n "$CONTEST" ] || exitm "failed to detect CONTEST"
	[ -n "$PROBLEM" ] || exitm "failed to detect PROBLEM"
	m CONTEST: $CONTEST
	m PROBLEM: $PROBLEM
}

atcoder_extract_task_screen_names() {
	sed -ne '
		/<select.*name="data.TaskScreenName">/,$ {
			/<\/select>/Q
			/<option/ {
				s/.*value="//
				s/".*//
				p
			}
		}
	' <<< "$CONTENT"
}

atcoder_do_mkdir() {
	local mode="$2"
	CONTEST="$1"
	local already_in_contest_dir
	if [ -z "$CONTEST" ]; then
		CONTEST="$(basename "$(pwd)")"
		already_in_contest_dir=1
	fi
	local CONTENT TASK_SCREEN_NAMES TASK_SCREEN_NAME
	CONTENT="$(atcoder_http_get "/contests/${CONTEST}/submit")" || exitm "failed to get task list"
	TASK_SCREEN_NAMES="$(atcoder_extract_task_screen_names <<< "$CONTENT")"
	[ -n "$TASK_SCREEN_NAMES" ] || exitm "SOMETHING WRONG with CONTEST ${CONTEST}: task list empty."

	if [ "$already_in_contest_dir" != 1 ]
	then
		[ -d "$CONTEST" ] || {
			mkdir "$CONTEST" && m "mkdir $CONTEST for contest $CONTEST now"
		} || exitm "failed to mkdir $CONTEST"
		cd "$CONTEST"
	fi

	local TASKDIR
	while read TASK_SCREEN_NAME
	do
		case "$mode" in
		'FULLNAME')
			TASKDIR="$TASK_SCREEN_NAME"
			;;
		'SHORTNAME')
			TASKDIR="$(sed -e 's/.*_//' <<< "$TASK_SCREEN_NAME")"
			;;
		'')
			exitm "internal error: mode missing." ;;
		*)
			exitm "internal error: unknown mode: $mode" ;;
		esac

		if [ -d "$TASKDIR" ]
		then
			m "mkdir $TASKDIR for $TASK_SCREEN_NAME is already done"
		else
			m "mkdir $TASKDIR for $TASK_SCREEN_NAME now"
			mkdir "$TASKDIR" || exitm "failed to mkdir $TASKDIR"
		fi
	done <<< "$TASK_SCREEN_NAMES"
	if [ "$already_in_contest_dir" != 1 ]
	then
		m "\`cd ${CONTEST}\` for eval"
		echo "cd ${CONTEST}"
	fi
}

atcoder_do_edit() {
	atcoder_assert_config
	atcoder_assert_pwd
	[ -e "${SOURCEFILE}" ] || {
		m "no source to edit: ${SOURCEFILE} not found."
		echo 1>&2 -n 'Hit Enter to init. > '
		read
		atcoder_do_init
		m "OK"
		echo 1>&2 -n 'Hit Enter to continue. > '
		read
	}
	atcoder_edit "$SOURCEFILE"
}

atcoder_extract_pre() {
	local HEADER_PAT="$1"
	sed -ne '\@'"$HEADER_PAT"'@,$ {
		/<pre>/,$ {
			/<pre>/ {
				s/.*<pre>//
				s/\r$//
				/^$/n
			}
			s/\r$//
			\@</pre>@ Q
			p
		}
	}' -e '$ { Q 1 }'
}

atcoder_task() {
	local SUBCOMMAND="$1"

	atcoder_assert_config
	atcoder_assert_pwd

	local CONTENT TASK_SCREEN_NAMES TASK_SCREEN_NAME
	CONTENT="$(atcoder_http_get "/contests/${CONTEST}/submit")" || exitm "failed to get task list"
	TASK_SCREEN_NAMES="$(atcoder_extract_task_screen_names <<< "$CONTENT")"
	[ -n "$TASK_SCREEN_NAMES" ] || exitm "SOMETHING WRONG with CONTEST ${CONTEST}: task list empty."
	TASK_SCREEN_NAME="$(
		grep "\<$PROBLEM"'$' <<< "$TASK_SCREEN_NAMES" ||
		grep "_$PROBLEM"'$' <<< "$TASK_SCREEN_NAMES"
	)"
	[ -n "$TASK_SCREEN_NAME" ] || exitm "failed to determinate TASK_SCREEN_NAME"
	m TASK_SCREEN_NAME: $TASK_SCREEN_NAME

	case "$SUBCOMMAND" in
	fetch)
		local TASKPATH="/contests/${CONTEST}/tasks/${TASK_SCREEN_NAME}"
		CONTENT="$(atcoder_http_get "$TASKPATH")" || exitm "failed to get $TASKPATH"

		[ -d sample ] || mkdir sample || exitm "failed to mkdir sample"
		local header_pat HEADER_PAT
		local SAMPLENO=1

		while true
		do
			header_pat="Sample Input $SAMPLENO"
			HEADER_PAT="<h3>$header_pat</h3>"
			atcoder_extract_pre "$HEADER_PAT" <<< "$CONTENT" >/dev/null || break
			atcoder_extract_pre "$HEADER_PAT" <<< "$CONTENT" > sample/$SAMPLENO.in
			m found "$header_pat"

			header_pat="Sample Output $SAMPLENO"
			HEADER_PAT="<h3>$header_pat</h3>"
			atcoder_extract_pre "$HEADER_PAT" <<< "$CONTENT" >/dev/null || exitm "no $header_pat found."
			atcoder_extract_pre "$HEADER_PAT" <<< "$CONTENT" > sample/$SAMPLENO.out
			m found "$header_pat"

			SAMPLENO=$(( SAMPLENO + 1 ))
		done

		while true
		do
			header_pat="入力例 $SAMPLENO"
			HEADER_PAT="<h3>$header_pat</h3>"
			atcoder_extract_pre "$HEADER_PAT" <<< "$CONTENT" >/dev/null || break
			atcoder_extract_pre "$HEADER_PAT" <<< "$CONTENT" > sample/$SAMPLENO.in
			m found "$header_pat"

			header_pat="出力例 $SAMPLENO"
			HEADER_PAT="<h3>$header_pat</h3>"
			atcoder_extract_pre "$HEADER_PAT" <<< "$CONTENT" >/dev/null || exitm "no $header_pat found."
			atcoder_extract_pre "$HEADER_PAT" <<< "$CONTENT" > sample/$SAMPLENO.out
			m found "$header_pat"

			SAMPLENO=$(( SAMPLENO + 1 ))
		done

		if [ "$SAMPLENO" == 1 ]; then
			exitm 'No samples found.'
		fi
		;;

	submit)
		local CSRF_TOKEN USER_SCREEN_NAME
		CSRF_TOKEN="$(atcoder_extract_js_var csrfToken <<< "$CONTENT")"
		[ -n "$CSRF_TOKEN" ] || exitm "failed to detect csrf_token"
		USER_SCREEN_NAME="$(atcoder_extract_js_var userScreenName <<< "$CONTENT")"
		[ -n "$USER_SCREEN_NAME" ] || exitm "login first"
		[ -e "${SOURCEFILE}" ] || exitm "no source to submit"

		m "submitting $SOURCEFILE as $LANGTITLE ..."
		local STATUS
		STATUS="$(atcoder_http_post "/contests/${CONTEST}/submit" \
			--data-urlencode "data.LanguageId=${LANGUAGEID}" \
			--data-urlencode "data.TaskScreenName=${TASK_SCREEN_NAME}" \
			--data-urlencode "sourceCode=$(cat "${SOURCEFILE}")" \
			--data-urlencode "csrf_token=$CSRF_TOKEN" \
			-o /dev/null -w '%{http_code}\n'
			)" ||
			exitm "submit failed."
		case "$STATUS" in
		302) ;;
		*)   exitm "SOMETHING WRONG: non-302 response($STATUS) after post" ;;
		esac
		;;
	*)
		exitm "INTERNAL ERROR: unknown: $SUBCOMMAND"
		;;
	esac
}

atcoder_do_fetch() {
	atcoder_task fetch
}

checked_cp() {
	local CPFROM="$1"
	local CPTO="$2"

	[ -f "${CPFROM}" ] || exitm "cannoct access to template: $CPFROM"

	m cp "$CPFROM" "$CPTO"
	cp "$CPFROM" "$CPTO" || exitm "cp faield."
}

checked_cp_i() {
	local CPFROM="$1"
	local CPTO="$2"

	[ -f "${CPFROM}" ] || exitm "cannoct access to template: $CPFROM"

	# `cp -i` don't fail even if overwrite cancelled interactively.
	if [ -e "$CPTO" ]
	then
		echo 1>&2 -n "$CPTO already exists. Overwrite? [y/N]"
		read C
		RC="$?"
		case "$RC" in
		0)
			;;
		*)
			exitm "Cancelled."
			;;
		esac
		case "$C" in
		Y|y)
			;;
		*)
			exitm "Cancelled."
			;;
		esac
	fi

	m cp "$CPFROM" "$CPTO"
	cp "$CPFROM" "$CPTO" || exitm "cp faield."
}

atcoder_assert_tmplroot() {
	local RC WORKROOT
	WORKROOT="$(git rev-parse --show-toplevel)"
	RC="$?"
	case "$RC" in
	0) ;;
	*) exitm "Failed to detect WORKROOT($RC). Please check if git repo is properly checked out." ;;
	esac
	TMPLROOT="${WORKROOT}/templates"
}

atcoder_edit() {
	"$EDITOR" "$@"
}

atcoder_do_init() {
	local ATCODER_LANG="$1"
	[ -z "${ATCODER_LANG}" ] || atcoder_do_switch "$ATCODER_LANG"

	atcoder_assert_pwd
	atcoder_assert_config
	atcoder_assert_tmplroot

	checked_cp_i "${TMPLROOT}/source/${SOURCETMPL}" "./${SOURCEFILE}"
}

atcoder_do_switch() {
	local ATCODER_LANG="$1"

	atcoder_assert_tmplroot

	if [ -z "${ATCODER_LANG}" ]
	then
		m "usage: $0 switch <LANGUAGE>"
		m "$(printf '%-10s %s\n' "LANGUAGE" "DESCRIPTION")"
		m "$(printf '%-10s %s\n' "----------" "------------------------------")"
		local CONFIGTMPL
		while read CONFIGTMPL
		do
			ATCODER_LANG=
			LANGTITLE=
			. "$CONFIGTMPL"
			ATCODER_LANG="$(basename "$CONFIGTMPL")"
			ATCODER_LANG="${ATCODER_LANG%.*}"
			m "$(printf '%-10s %s\n' "$ATCODER_LANG" "$LANGTITLE")"
		done < <(find "${TMPLROOT}/config/" -mindepth 1 -maxdepth 1 -name '*.atcoder' | sort)
		exitm "please specify LANGUAGE"
	fi

	case "$ATCODER_LANG" in
	default)
		[ ! -e ./.atcoder ] || rm ./.atcoder || exitm "failed to rm ./.atcoder"
		;;
	*)
		checked_cp "${TMPLROOT}/config/${ATCODER_LANG}.atcoder" ./.atcoder
		chmod u+x ./.atcoder || exitm "failed to chmod ./.atcoder"
		;;
	esac

	# reload config
	atcoder_load_config
	atcoder_assert_config
}

atcoder_do_cat_library() {
	local LIBNAME="$1"
	local EXT="${SOURCEFILE##*.}"
	[ -n "${EXT}" ] || exitm "cannot detect EXT"

	atcoder_assert_config
	atcoder_assert_tmplroot

	[ -d "${TMPLROOT}/lib" ] || exitm "${TMPLROOT}/lib not found."

	local LIBFILE
	if [ -n "${LIBNAME}" ]
	then
		LIBFILE="${TMPLROOT}/lib/${LIBNAME}.${EXT}"
		[ -r "$LIBFILE" ] || exitm "LIBFILE $LIBFILE not found."
		cat "$LIBFILE"
	else
		echo "Libraries for ${LANGTITLE} (.${EXT})"
		printf '%-20s %s\n' libname desciption
		printf '%20s %s\n' '--------------------' '--------------------'
		while read LIBFILE
		do
			LIBNAME="${LIBFILE%.*}"
			LIBNAME="$(basename "$LIBNAME")"
			printf '%-20s %s\n' "$LIBNAME" "$(head -n1 "$LIBFILE")"
		done < <(find "${TMPLROOT}/lib/" -name '*.'"${EXT}")
	fi
}

atcoder_do_test() {
	atcoder_assert_config
	[ -d sample ] || {
		m "fetching first."
		atcoder_do_fetch
	}
	atcoder_build || exitm "build faield."
	m "running $SOURCEFILE on $LANGTITLE ..."
	local SAMPLE_IN SAMPLE_OUT RUN_OUT RC
	RC=0
	while read SAMPLE_IN
	do
		SAMPLE_OUT="${SAMPLE_IN%.in}.out"
		m "diff -Lgot <($SOURCEFILE < ${SAMPLE_IN}) -Lexpected ${SAMPLE_OUT}"
		RUN_OUT="$(atcoder_run < "${SAMPLE_IN}")" || exitm "atcoder_run failed!"
		if diff -y --suppress-common-lines -L got <(echo "$RUN_OUT") -L expected "$SAMPLE_OUT"
		then
			m OK
		else
			m NG
			RC=1
		fi
	done < <(if [ -n "$1" ]; then echo sample/"$1".in; else find sample -name '*.in' | sort -n; fi)
	return "$RC"
}

atcoder_do_repl() {
	type -t atcoder_repl >/dev/null || exitm "config missing: atcoder_repl"
	atcoder_repl
}

atcoder_do_submit() {
	atcoder_task submit
}

declare MAINCOMMAND

show_help() {
	echo "$0 <サブコマンド> [引数...] - AtCoder 提出クライアント"
	case "$1" in
	'')
		echo 'サブコマンド:'
		;;
	d|details)
		cat <<-'EOF'
		以下のサブコマンドが利用可能です。
		EOF
		;;
	*)  exitm "internal error: unknown mode: $mode" ;;
	esac
	local MAINCOMMANDNAME="${MAINCOMMAND##*/}"
	local SEDARGS=(
		-n
		-e " s@\$COOKIE_JAR@$COOKIE_JAR@g "
		-e " s@\$MAINCOMMANDNAME@$MAINCOMMANDNAME@g "
	)
	case "$1" in
	'')
		SEDARGS+=( -e '
		/^# dispatch/,$ {
			/^[-a-z|]\+)/ {
				/<UNDOCUMENTED>/d
				s/).*//
				s/|.*//
				s/^/\t/
				p
			}
		}' ) ;;
	d)
		SEDARGS+=( -e '
		/^# dispatch/,$ {
			/^[-a-z|]\+)/ {
				/<UNDOCUMENTED>/d
				s/).*//
				s/|\(.*\)/ (または \1)/
				s/|/, /g
				p
			}
		}' ) ;;
	details)
		SEDARGS+=( -e '
		/^# dispatch/,$ {
			/^[-a-z|]\+)/ {
				/<UNDOCUMENTED>/d
				s/).*//
				s/|\(.*\)/ (または \1)/
				s/|/, /g
				s/^/\n/
				p
			}
		}' ) ;;
	*)  exitm "internal error: unknown mode: $mode" ;;
	esac

	case "$1" in
	'') ;;
	details|d)
		SEDARGS+=( -e '
			/^# dispatch/,$ {
				/^[ \t]*###/ {
					s/^[ \t]*###/\t/
					p
				}
			}' )
		;;
	*)  exitm "internal error: unknown mode: $mode" ;;
	esac
	sed "${SEDARGS[@]}" < "$MAINCOMMAND"
}

show_rights() {
	cat <<-EOF

	このツールは開発中です。詳細は以下URLにてご確認ください:
	https://github.com/plaster/cli-client-atcoder
	EOF
}

show_version() {
	cat <<-EOF
	cli-client-atcoder version $VERSION - AtCoder 提出クライアント
	EOF
}

# dispatch
atcoder_load_config
MAINCOMMAND="$0"
SUBCOMMAND="$1"
shift
case "$SUBCOMMAND" in
login)
	### AtCoderへログインします。IDとパスワードの入力を要求します。
	### ログイン状態は $COOKIE_JAR ファイルにセッションとして保持されます。
	atcoder_do_login
	;;
logout)
	### AtCoderをセッションログアウトします。
	atcoder_do_logout
	;;
check-logged-in|whoami) #<UNDOCUMENTED>
	#<UNDOCUMENTED> AtCoderへのログイン状態を表示します。
	atcoder_check_logged_in
	;;
config) #<UNDOCUMENTED>
	show_config "$@"
	;;
md|new)
	### 引数: [contest]
	### コンテストの全タスクのディレクトリを掘ります。
	### 引数にコンテスト名(URLに表示されているもの)を指定した場合、コンテスト名のディレクトリを作成し
	### 各タスクのディレクトリはその中に作成されます。
	### 引数を指定しなかった場合、カレントディレクトリをコンテスト名と見なし
	### 各タスクのディレクトリはカレントディレクトリに作成されます。
	### 作成されるディレクトリは a b c ... のようになります。
	### 例) ~/work/abc188$ $MAINCOMMANDNAME md
	atcoder_do_mkdir "$1" SHORTNAME
	;;
mkdir)
	### 引数: [contest]
	### md サブコマンドと同様ですが
	### 各タスクのディレクトリ名は abc188_a abc188_b ... のようにURLのものになります。
	### タスク名の末尾がアルファベット一文字で定まらないようなコンテスト（abs等）で使います。
	atcoder_do_mkdir "$1" FULLNAME
	;;
init|i|gen)
	### 引数: [template_id]
	### タスクディレクトリ下に回答テンプレートを生成します。タスクディレクトリ下で実行してください。
	### 例) ~/work/abc188/a$ $MAINCOMMANDNAME init
	### 例) ~/work/abc188/b$ $MAINCOMMANDNAME init bash
	atcoder_do_init "$@"
	;;
switch)
	### 引数: <template_id>
	### タスクディレクトリ下の回答テンプレートを別言語に切り替えます。タスクディレクトリ下で実行してください。
	### 例) ~/work/abc188/a$ $MAINCOMMANDNAME switch bash
	atcoder_do_switch "$@"
	;;
edit|e)
	### エディタを起動して回答を編集します。タスクディレクトリ下で実行してください。
	### デフォルトでは EDITOR 環境変数が使われます。
	### 設定ファイルで atcoder_edit() シェル関数を定義してカスタマイズできます。
	atcoder_do_edit
	;;
library|lib) #<UNDOCUMENTED>
	#<UNDOCUMENTED> ライブラリコードをcatします。vim等で :r! cca lib <テンプレート名> 等で呼ぶとよいでしょう。
	atcoder_do_cat_library "$@"
	;;
fetch)
	### タスクディレクトリ下にサンプル入出力をダウンロードして保存します。
	atcoder_do_fetch
	;;
test|t)
	### 引数: [テストケース名]
	### サンプル入力で回答を実行し、サンプル出力との結果の一致をチェックします。
	### テストケース名を省略すると全ケースでチェックします。
	atcoder_do_test "$@"
	;;
submit|sub|s)
	### 回答を提出します。提出前にサンプル入出力と比較し、一致しない場合は中止します。
	m "testing first."
	if atcoder_do_test
	then
		m "All tests OK."
		m "Now submit!"
		atcoder_do_submit
	else
		exitm "test failed."
	fi
	;;
force-submit|fsub)
	### 回答を提出します。サンプル入出力との比較は行いません。
	atcoder_do_submit
	;;
repl)
	### 回答コードをロードした状態で処理系と対話します。
	atcoder_do_repl
	;;
help)
	### このヘルプを表示します。
	show_help d
	show_rights
	;;
help-densely) #<UNDOCUMENTED>
	show_help d
	show_rights
	;;
help-sparsely) #<UNDOCUMENTED>
	show_help details
	show_rights
	;;
version)
	### バージョンを表示します。
	show_version
	;;
'')
	show_help
	exitm "SUBCOMMAND MISSING"
	;;
*)
	exitm "UNKNOWN SUBCOMMAND: $SUBCOMMAND"
	;;
esac
